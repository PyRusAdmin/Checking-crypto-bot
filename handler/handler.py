import asyncio
import datetime as dt
from datetime import datetime

import requests
from aiogram import F
from aiogram.types import CallbackQuery, Message
from loguru import logger
from peewee import IntegrityError

from database.database import read_from_db, Transactions, write_database
from keyboards.keyboards import back, main_keyboard, confirmation_keyboard
from system.system import WALLET, WALLET_1, router, bot


async def write_transaction(transaction_id, time, amount, symbol, from_transaction, to_transaction):
    try:
        Transactions.create(
            transaction_id=transaction_id,
            time=time,
            amount=amount,
            symbol=symbol,
            from_transaction=from_transaction,
            to_transaction=to_transaction,
        )
        await send_transaction_alert(transaction_id, time, amount, symbol, from_transaction, to_transaction)
    except IntegrityError:
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")


TARGET_USER_ID = 535185511  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è


async def send_transaction_alert(transaction_id, time, amount, symbol, from_transaction, to_transaction):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        message_text = (
            f"üí∞ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n"
            f"‚Ä¢ –°—É–º–º–∞: {amount} {symbol}\n"
            f"‚Ä¢ –û—Ç: {from_transaction}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {time}\n"
            f"‚Ä¢ –ö–æ—à–µ–ª–µ–∫: {to_transaction}"
        )
        await bot.send_message(chat_id=TARGET_USER_ID, text=message_text)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TARGET_USER_ID} –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")


async def monitor_wallets():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—à–µ–ª—å–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö"""
    wallets = [WALLET, WALLET_1]

    while True:
        try:
            for address in wallets:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: {address}")
                await fetch_tron_transactions(address)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
        await asyncio.sleep(60)  # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥


async def fetch_tron_transactions(address: str) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö (–µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ –ë–î) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞"""
    result = [f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ USDT TRC20: {address}\n"]
    url = f"https://api.trongrid.io/v1/accounts/{address}/transactions/trc20"  # –£–ë–†–ê–õ –ü–†–û–ë–ï–õ–´!
    pages = 1
    params = {
        "only_confirmed": True,
        "limit": 20,
    }
    for _ in range(pages):
        r = requests.get(url, params=params, headers={"accept": "application/json"})
        logger.info(r.json())
        params["fingerprint"] = r.json().get("meta", {}).get("fingerprint")

        for tr in r.json().get("data", []):
            to_transaction = tr.get("to")
            from_transaction = tr.get("from")

            if to_transaction and to_transaction.lower() == address.lower():
                symbol = tr.get("token_info", {}).get("symbol")
                value = tr.get("value", "")
                dec = -1 * int(tr.get("token_info", {}).get("decimals", "6"))
                amount = float(value[:dec] + "." + value[dec:])
                time = dt.datetime.fromtimestamp(float(tr.get("block_timestamp", 0)) / 1000)
                result.append(f"{time} | {amount:>9.02f} {symbol} | –æ—Ç {from_transaction}")
                tx_id = tr.get("transaction_id")
                await write_transaction(tx_id, time, amount, symbol, from_transaction, to_transaction)
                logger.info(f"–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞: {tx_id}")

    return "\n".join(result)


async def send_long_message(message: Message, text: str, chunk_size: int = 4000):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫—É—Å–∫–∞–º"""
    for i in range(0, len(text), chunk_size):
        await message.answer(text[i: i + chunk_size], reply_markup=back())


@router.callback_query(F.data == "register")
async def callback_register_handler(query: CallbackQuery) -> None:
    logger.debug(
        f"ID: {query.from_user.id}, username: {query.from_user.username}, last_name: {query.from_user.last_name}, first_name: {query.from_user.first_name}"
    )

    write_database(
        id_user=query.from_user.id,
        user_name=query.from_user.username,
        last_name=query.from_user.last_name,
        first_name=query.from_user.first_name,
        status="False"
    )
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                               reply_markup=back())  # <-- –¥–æ–±–∞–≤–∏–ª —Å—é–¥–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥)
    await query.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –≤ Telegram

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await bot.send_message(
        TARGET_USER_ID,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{query.from_user.username or query.from_user.id} "
        f"–æ—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        reply_markup=confirmation_keyboard(),
    )


@router.callback_query(F.data.startswith("confirm:"))
async def confirm_user(query: CallbackQuery) -> None:
    target_id = int(query.data.split(":")[1])  # –¥–æ—Å—Ç–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    write_database(
        id_user=target_id,
        user_name=None,  # –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
        last_name=None,
        first_name=None,
        status="True"
    )

    await query.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")


@router.callback_query(F.data == "back")
async def callback_back_handler(query: CallbackQuery) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    await query.message.answer(text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –±–æ—Ç–µ!", reply_markup=main_keyboard())


@router.callback_query(F.data == "transactions")
async def callback_transactions_handler(query: CallbackQuery) -> None:
    wallet_addresses = [WALLET, WALLET_1]
    full_message_parts = []

    for address in wallet_addresses:
        try:
            transactions_text = await fetch_tron_transactions(address)
            full_message_parts.append(transactions_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {address}: {e}")
            full_message_parts.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {address}")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_message = "\n\n".join(full_message_parts)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ —Ä–∞–∑–±–∏–≤–∞–µ–º, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)
    await send_long_message(query.message, full_message)


@router.callback_query(F.data == "today_transactions")
async def callback_today_transactions_handler(query: CallbackQuery) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""

    await query.message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=back())

    rows = await read_from_db()

    today = datetime.now().date()
    today_transactions = []

    for row in rows:
        # –ü—Ä–∏–≤–æ–¥–∏–º row.time –∫ –¥–∞—Ç–µ
        if isinstance(row.time, datetime):
            transaction_date = row.time.date()
        elif isinstance(row.time, str):
            transaction_date = datetime.strptime(row.time[:10], "%Y-%m-%d").date()
        else:
            continue

        if transaction_date == today:
            today_transactions.append(row)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if today_transactions:
        response = "üìå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        for t in today_transactions:
            amount = getattr(t, 'amount', 0.0)
            symbol = getattr(t, 'symbol', '???')  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ currency ‚Üí —Ç–µ–ø–µ—Ä—å symbol
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            if isinstance(t.time, datetime):
                time_str = t.time.strftime("%H:%M")
            elif isinstance(t.time, str) and ' ' in t.time:
                time_str = t.time.split()[1]
            else:
                time_str = "???"

            response += f"‚Ä¢ {amount:.2f} {symbol} ‚Äî {time_str}\n"
        await query.message.answer(response, reply_markup=back())
    else:
        await query.message.answer("üì≠ –°–µ–≥–æ–¥–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç.", reply_markup=back())


def register_handler() -> None:
    router.callback_query.register(callback_register_handler)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    router.callback_query.register(callback_transactions_handler)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    router.callback_query.register(callback_back_handler)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    router.callback_query.register(callback_today_transactions_handler)  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    router.callback_query.register(confirm_user) # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
