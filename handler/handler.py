# -*- coding: utf-8 -*-
from datetime import datetime

from aiogram import F
from aiogram.types import CallbackQuery, Message
from loguru import logger

from database.database import read_from_db, write_database
from keyboards.keyboards import back, confirmation_keyboard
from parser.parser import fetch_tron_transactions
from system.system import WALLET, WALLET_1, router, bot, TARGET_USER_ID


async def send_long_message(message: Message, text: str, chunk_size: int = 4000):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫—É—Å–∫–∞–º"""
    for i in range(0, len(text), chunk_size):
        await message.answer(text[i: i + chunk_size], reply_markup=back())


@router.callback_query(F.data == "register")
async def callback_register_handler(query: CallbackQuery) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(
        f"ID: {query.from_user.id}, username: {query.from_user.username}, last_name: {query.from_user.last_name}, first_name: {query.from_user.first_name}"
    )
    """
    –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (database/people.db), –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫–∏—Ö –∫–∞–∫: id, username, –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, —Å—Ç–∞—Ç—É—Å. 
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å "False", —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞. 
    –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "True".
    """
    if query.from_user.id == TARGET_USER_ID:
        status = "True"
    else:
        status = "False"

    write_database(
        id_user=query.from_user.id,  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name=query.from_user.username,  # username
        last_name=query.from_user.last_name,  # —Ñ–∞–º–∏–ª–∏—è
        first_name=query.from_user.first_name,  # –∏–º—è
        status=status  # —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "False"
    )
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.message.answer(
        text="‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=back()
    )
    # await query.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –≤ Telegram

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await bot.send_message(
        chat_id=TARGET_USER_ID,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{query.from_user.username or query.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n",
        reply_markup=confirmation_keyboard(query.from_user.id),
    )


@router.callback_query(F.data.startswith("confirm:"))
async def confirm_user(query: CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞"""
    target_id = int(query.data.split(":")[1])  # –¥–æ—Å—Ç–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    logger.debug(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_id}")

    write_database(
        id_user=target_id,  # –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ id
        user_name=None,  # –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
        last_name=None,
        first_name=None,
        status="True"
    )

    await query.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")


@router.callback_query(F.data == "transactions")
async def callback_transactions_handler(query: CallbackQuery) -> None:
    wallet_addresses = [WALLET, WALLET_1]
    full_message_parts = []

    for address in wallet_addresses:
        try:
            transactions_text = await fetch_tron_transactions(address)
            full_message_parts.append(transactions_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {address}: {e}")
            full_message_parts.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {address}")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_message = "\n\n".join(full_message_parts)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ —Ä–∞–∑–±–∏–≤–∞–µ–º, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)
    await send_long_message(query.message, full_message)


@router.callback_query(F.data == "today_transactions")
async def callback_today_transactions_handler(query: CallbackQuery) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""

    await query.message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=back())

    rows = await read_from_db()

    today = datetime.now().date()
    today_transactions = []

    for row in rows:
        # –ü—Ä–∏–≤–æ–¥–∏–º row.time –∫ –¥–∞—Ç–µ
        if isinstance(row.time, datetime):
            transaction_date = row.time.date()
        elif isinstance(row.time, str):
            transaction_date = datetime.strptime(row.time[:10], "%Y-%m-%d").date()
        else:
            continue

        if transaction_date == today:
            today_transactions.append(row)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if today_transactions:
        response = "üìå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        for t in today_transactions:
            amount = getattr(t, 'amount', 0.0)
            symbol = getattr(t, 'symbol', '???')  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ currency ‚Üí —Ç–µ–ø–µ—Ä—å symbol
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            if isinstance(t.time, datetime):
                time_str = t.time.strftime("%H:%M")
            elif isinstance(t.time, str) and ' ' in t.time:
                time_str = t.time.split()[1]
            else:
                time_str = "???"

            response += f"‚Ä¢ {amount:.2f} {symbol} ‚Äî {time_str}\n"
        await query.message.answer(response, reply_markup=back())
    else:
        await query.message.answer("üì≠ –°–µ–≥–æ–¥–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç.", reply_markup=back())


def register_handler() -> None:
    router.callback_query.register(callback_register_handler)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    router.callback_query.register(callback_transactions_handler)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    router.callback_query.register(callback_today_transactions_handler)  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    router.callback_query.register(confirm_user)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
