import hashlib
import hmac
import time
import urllib.parse

import requests
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from proxy import setup_proxy
from system.system import api_key, api_secret, user, password, ip, port, router


def get_wallet_balance(api_key, secret_key, quote_asset="USDT"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º Binance –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ.
    –≠–Ω–¥–ø–æ–∏–Ω—Ç: GET /sapi/v1/asset/wallet/balance
    """
    setup_proxy(user=user, password=password, ip=ip, port=port)

    base_url = "https://api.binance.com"  # ‚ùóÔ∏è –£–ë–†–ê–õ–ò –õ–ò–®–ù–ò–ï –ü–†–û–ë–ï–õ–´
    endpoint = "/sapi/v1/asset/wallet/balance"
    timestamp = int(time.time() * 1000)

    params = {
        'timestamp': timestamp,
        'recvWindow': 5000
    }

    if quote_asset:
        params['quoteAsset'] = quote_asset

    query_string = urllib.parse.urlencode(params)
    signature = hmac.new(secret_key.encode('utf-8'), query_string.encode('utf-8'), hashlib.sha256).hexdigest()

    headers = {
        'X-MBX-APIKEY': api_key
    }

    url = f"{base_url}{endpoint}?{query_string}&signature={signature}"
    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –∫: {url}")

    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ HTTP: {e}")
        return None

    if response.status_code == 200:
        return response.json()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} ‚Äî {response.text}")
        return None


def get_funding_assets(api_key, secret_key, asset: str = None, need_btc_valuation: bool = False):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –≤ Funding Wallet —á–µ—Ä–µ–∑ POST.
    –≠–Ω–¥–ø–æ–∏–Ω—Ç: POST /sapi/v1/asset/get-funding-asset
    """
    setup_proxy(user=user, password=password, ip=ip, port=port)

    base_url = "https://api.binance.com"  # ‚ùóÔ∏è –£–ë–†–ê–õ–ò –õ–ò–®–ù–ò–ï –ü–†–û–ë–ï–õ–´
    endpoint = "/sapi/v1/asset/get-funding-asset"
    timestamp = int(time.time() * 1000)

    params = {
        'timestamp': timestamp,
        'recvWindow': 5000,
        'needBtcValuation': 'true' if need_btc_valuation else 'false'
    }

    if asset:
        params['asset'] = asset

    query_string = urllib.parse.urlencode(params)
    signature = hmac.new(secret_key.encode(), query_string.encode(), hashlib.sha256).hexdigest()
    params['signature'] = signature  # –ü–æ–¥–ø–∏—Å—å –≤ —Ç–µ–ª–µ POST

    headers = {'X-MBX-APIKEY': api_key}
    url = f"{base_url}{endpoint}"

    print(f"[DEBUG] POST –∑–∞–ø—Ä–æ—Å –∫: {url}")

    try:
        response = requests.post(url, headers=headers, data=params, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Funding: {e}")
        return None


@router.message(Command("balance"))
async def balance(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–∞–ª–∞–Ω—Å –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º –∏ Funding Wallet"""
    await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ —Å Binance...")

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
    balances = get_wallet_balance(api_key, api_secret, quote_asset="USDT")
    if not balances:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
    text = "üìä <b>–ë–∞–ª–∞–Ω—Å –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º (–≤ USDT):</b>\n\n"
    for wallet in balances:
        status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if wallet['activate'] else "‚õî –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        text += f"‚Ä¢ <b>{wallet['walletName']}</b>: {wallet['balance']} USDT ({status})\n"

    # –ü–æ–ª—É—á–∞–µ–º Funding –∞–∫—Ç–∏–≤—ã
    funding_assets = get_funding_assets(api_key, api_secret, need_btc_valuation=False)
    if funding_assets:
        text += "\nüíº <b>Funding Wallet:</b>\n\n"
        for asset in funding_assets:
            free = asset.get('free', '0')
            locked = asset.get('locked', '0')
            freeze = asset.get('freeze', '0')
            asset_name = asset.get('asset', 'N/A')
            text += f"‚Ä¢ <b>{asset_name}</b>: —Å–≤–æ–±–æ–¥–Ω–æ {free}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {locked}, –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ {freeze}\n"
    else:
        text += "\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Funding Wallet."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await message.answer(text, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")


def register_commands_handler():
    # router.register.message_handler(balance)
    router.message.register(balance)
