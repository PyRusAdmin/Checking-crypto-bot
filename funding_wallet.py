# funding_wallet.py
import hashlib
import hmac
import time
import urllib.parse

import requests

from system.system import api_key, api_secret


def get_funding_assets(
        api_key: str,
        api_secret: str,
        asset: str = None,
        need_btc_valuation: bool = False
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –≤ Funding Wallet —á–µ—Ä–µ–∑ POST-–∑–∞–ø—Ä–æ—Å.
    –≠–Ω–¥–ø–æ–∏–Ω—Ç: POST /sapi/v1/asset/get-funding-asset

    :param api_key: API-–∫–ª—é—á Binance
    :param api_secret: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á Binance
    :param asset: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫—Ç–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "USDT")
    :param need_btc_valuation: –ù—É–∂–Ω–∞ –ª–∏ –æ—Ü–µ–Ω–∫–∞ –≤ BTC (true/false)
    :return: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    base_url = "https://api.binance.com"
    endpoint = "/sapi/v1/asset/get-funding-asset"
    timestamp = int(time.time() * 1000)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ POST-–∑–∞–ø—Ä–æ—Å–∞ (–≤ query string –¥–ª—è –ø–æ–¥–ø–∏—Å–∏!)
    params = {
        'timestamp': timestamp,
        'recvWindow': 5000
    }

    if asset:
        params['asset'] = asset
    if need_btc_valuation:
        params['needBtcValuation'] = 'true'
    else:
        params['needBtcValuation'] = 'false'

    # –ü–æ–¥–ø–∏—Å—å HMAC SHA256
    query_string = urllib.parse.urlencode(params)
    signature = hmac.new(
        api_secret.encode('utf-8'),
        query_string.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    params['signature'] = signature

    headers = {
        'X-MBX-APIKEY': api_key
    }

    url = f"{base_url}{endpoint}"

    print(f"[DEBUG] POST –∑–∞–ø—Ä–æ—Å –∫: {url}")
    print(f"[DEBUG] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

    try:
        response = requests.post(url, headers=headers, data=params, timeout=10)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ HTTP: {e}")
        return None

    try:
        data = response.json()
    except ValueError:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {response.text}")
        return None

    if isinstance(data, dict) and data.get('code'):
        print(f"‚ùå –û—à–∏–±–∫–∞ API Binance: {data.get('msg')}")
        return None

    return data


def display_funding_assets(assets_data):
    """
    –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ Funding Wallet –≤ –∫–æ–Ω—Å–æ–ª—å.
    """
    if not assets_data:
        print("üì≠ Funding Wallet –ø—É—Å—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return

    print("\n" + "=" * 70)
    print("üí∞ –ê–ö–¢–ò–í–´ –í FUNDING WALLET")
    print("=" * 70)
    for item in assets_data:
        asset_name = item.get('asset', 'N/A')
        free = item.get('free', '0')
        locked = item.get('locked', '0')
        freeze = item.get('freeze', '0')
        withdrawing = item.get('withdrawing', '0')
        btc_valuation = item.get('btcValuation', 'N/A')

        print(f"‚ñ∏ –ê–∫—Ç–∏–≤: {asset_name}")
        print(f"  –°–≤–æ–±–æ–¥–Ω–æ: {free}")
        print(f"  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked}")
        print(f"  –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {freeze}")
        print(f"  –í—ã–≤–æ–¥–∏—Ç—Å—è: {withdrawing}")
        print(f"  –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ BTC: {btc_valuation}")
        print("-" * 50)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == '__main__':
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏–∑ –≤–∞—à–µ–≥–æ system.system
    try:
        from system.system import api_key, api_secret
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å api_key –∏ api_secret. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ system/system.py")
        exit(1)

    print("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ –∏–∑ Funding Wallet...")

    # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫—Ç–∏–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: asset="USDT"
    # –ò–ª–∏ –≤–∫–ª—é—á–∏—Ç—å BTC-–æ—Ü–µ–Ω–∫—É: need_btc_valuation=True
    assets = get_funding_assets(
        api_key=api_key,
        api_secret=api_secret,
        asset=None,  # –í—Å–µ –∞–∫—Ç–∏–≤—ã
        need_btc_valuation=True  # –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ BTC
    )

    display_funding_assets(assets)
