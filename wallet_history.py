import json
from datetime import datetime, timezone, timedelta

from binance.client import Client
from binance.exceptions import BinanceAPIException
from dotenv import load_dotenv

from system.system import api_key, api_secret

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# API_KEY = os.getenv('BINANCE_API_KEY')
# API_SECRET = os.getenv('BINANCE_API_SECRET')
# api_key, api_secret


if not api_key or not api_secret:
    raise ValueError("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")

client = Client(api_key, api_secret)


def get_wallet_history(asset='USDT', days=30):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–∫—Ç–∏–≤—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é USDT)
    –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π.
    """
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º timestamp –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
    end_time = int(datetime.now(timezone.utc).timestamp() * 1000)
    start_time = int((datetime.now(timezone.utc) - timedelta(days=days)).timestamp() * 1000)

    all_transactions = []

    print(f"üîç –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è {asset} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...\n")

    # 1. –î–µ–ø–æ–∑–∏—Ç—ã (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
    try:
        deposits = client.get_deposit_history(coin=asset, startTime=start_time, endTime=end_time)
        for dep in deposits:
            all_transactions.append({
                "type": "deposit",
                "amount": float(dep['amount']),
                "status": dep['status'],
                "address": dep.get('address', '-'),
                "txId": dep.get('txId', '-'),
                "insertTime": datetime.fromtimestamp(dep['insertTime'] // 1000, tz=timezone.utc).strftime(
                    '%Y-%m-%d %H:%M:%S'),
                "network": dep.get('network', 'N/A')
            })
        print(f"üì• –î–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(deposits)}")
    except BinanceAPIException as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {e}")

    # 2. –í—ã–≤–æ–¥—ã (withdrawals)
    try:
        withdrawals = client.get_withdraw_history(coin=asset, startTime=start_time, endTime=end_time)
        for wd in withdrawals:
            apply_time_raw = wd['applyTime']
            apply_time_formatted = "N/A"

            if isinstance(apply_time_raw, int) or (isinstance(apply_time_raw, str) and apply_time_raw.isdigit()):
                # –≠—Ç–æ timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1712345678901")
                timestamp = int(apply_time_raw) // 1000
                apply_time_formatted = datetime.fromtimestamp(timestamp, tz=timezone.utc).strftime('%Y-%m-%d %H:%M:%S')
            elif isinstance(apply_time_raw, str):
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –¥–∞—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä "2025-09-19 11:05:36"
                    dt = datetime.strptime(apply_time_raw, '%Y-%m-%d %H:%M:%S')
                    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ UTC (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ)
                    dt = dt.replace(tzinfo=timezone.utc)
                    apply_time_formatted = dt.strftime('%Y-%m-%d %H:%M:%S')
                except ValueError:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
                    apply_time_formatted = apply_time_raw

            all_transactions.append({
                "type": "withdrawal",
                "amount": float(wd['amount']),
                "status": wd['status'],
                "address": wd.get('address', '-'),
                "txId": wd.get('txId', '-'),
                "applyTime": apply_time_formatted,
                "network": wd.get('network', 'N/A'),
                "transactionFee": float(wd.get('transactionFee', 0))
            })
        print(f"üì§ –í—ã–≤–æ–¥–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(withdrawals)}")
    except BinanceAPIException as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–æ–≤: {e}")

    # 3. –°–ø–æ—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏, –≥–¥–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª USDT (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        # –ü–æ–ª—É—á–∏–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –≥–¥–µ –µ—Å—Ç—å USDT
        exchange_info = client.get_exchange_info()
        usdt_symbols = [s['symbol'] for s in exchange_info['symbols'] if 'USDT' in s['symbol']]

        trades_total = 0
        for symbol in usdt_symbols[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–µ—Ä–≤—ã–º–∏ 10 –ø–∞—Ä–∞–º–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
            trades = client.get_my_trades(symbol=symbol, startTime=start_time, endTime=end_time, limit=1000)
            for trade in trades:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∞
                is_buyer = trade['isBuyer']
                quote_asset = symbol.replace(trade['symbol'].replace('USDT', ''),
                                             '')  # –≥—Ä—É–±–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ‚Äî –ª—É—á—à–µ –ø–∞—Ä—Å–∏—Ç—å —á–µ—Ä–µ–∑ exchange_info
                if 'USDT' in quote_asset:
                    # USDT ‚Äî –∫–≤–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT), –∑–Ω–∞—á–∏—Ç, amount ‚Äî —ç—Ç–æ BTC, –∞ —Å—É–º–º–∞ –≤ USDT = qty * price
                    usdt_amount = float(trade['qty']) * float(trade['price'])
                    direction = "BUY" if is_buyer else "SELL"
                else:
                    # USDT ‚Äî –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                    usdt_amount = float(trade['quoteQty'])
                    direction = "SELL" if is_buyer else "BUY"  # –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è

                all_transactions.append({
                    "type": f"spot_trade_{direction}",
                    "symbol": trade['symbol'],
                    "usdt_amount": round(usdt_amount, 2),
                    "price": float(trade['price']),
                    "qty": float(trade['qty']),
                    "time": datetime.fromtimestamp(trade['time'] // 1000, tz=timezone.utc).strftime(
                        '%Y-%m-%d %H:%M:%S'),
                    "orderId": trade['orderId']
                })
            trades_total += len(trades)
        print(f"üí± –°–ø–æ—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ —Å USDT –Ω–∞–π–¥–µ–Ω–æ: {trades_total}")
    except BinanceAPIException as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫: {e}")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    all_transactions.sort(key=lambda x: x.get('insertTime') or x.get('applyTime') or x.get('time'))

    print(f"\n‚úÖ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(all_transactions)}\n")
    print(json.dumps(all_transactions, indent=4, ensure_ascii=False))

    # –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª
    filename = f"wallet_history_{asset}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(all_transactions, f, indent=4, ensure_ascii=False)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {filename}")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ—à–µ–ª—å–∫–∞ USDT –Ω–∞ Binance')
    parser.add_argument('--asset', type=str, default='USDT', help='–ê–∫—Ç–∏–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä USDT, BTC')
    parser.add_argument('--days', type=int, default=30, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏')
    args = parser.parse_args()

    get_wallet_history(asset=args.asset, days=args.days)
