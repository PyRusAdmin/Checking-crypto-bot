import hashlib
import hmac
import time
import urllib.parse

import requests


def get_wallet_balance(api_key, secret_key, quote_asset="USDT"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º Binance –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é USDT).
    –≠–Ω–¥–ø–æ–∏–Ω—Ç: GET /sapi/v1/asset/wallet/balance
    """
    base_url = "https://api.binance.com"  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    endpoint = "/sapi/v1/asset/wallet/balance"
    timestamp = int(time.time() * 1000)

    params = {
        'timestamp': timestamp,
        'recvWindow': 5000
    }

    if quote_asset:
        params['quoteAsset'] = quote_asset

    query_string = urllib.parse.urlencode(params)
    signature = hmac.new(secret_key.encode('utf-8'), query_string.encode('utf-8'), hashlib.sha256).hexdigest()

    headers = {
        'X-MBX-APIKEY': api_key
    }

    url = f"{base_url}{endpoint}?{query_string}&signature={signature}"
    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –∫: {url}")

    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ HTTP: {e}")
        return None

    if response.status_code == 200:
        data = response.json()
        print(f"\n--- –ë–∞–ª–∞–Ω—Å –≤ {quote_asset} –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º ---")
        for wallet in data:
            status = '–∞–∫—Ç–∏–≤–µ–Ω' if wallet['activate'] else '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'
            print(f"‚ñ∏ {wallet['walletName']}: {wallet['balance']} {quote_asset} ({status})")
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} ‚Äî {response.text}")
        return None


def get_funding_assets(api_key, secret_key):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –≤ Funding Wallet.
    –≠–Ω–¥–ø–æ–∏–Ω—Ç: GET /sapi/v1/asset/get-funding-asset
    """
    base_url = "https://api.binance.com"  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    endpoint = "/sapi/v1/asset/get-funding-asset"
    timestamp = int(time.time() * 1000)
    params = {'timestamp': timestamp}
    query_string = urllib.parse.urlencode(params)
    signature = hmac.new(secret_key.encode(), query_string.encode(), hashlib.sha256).hexdigest()
    url = f"{base_url}{endpoint}?{query_string}&signature={signature}"
    headers = {'X-MBX-APIKEY': api_key}

    print(f"[DEBUG] Funding –∑–∞–ø—Ä–æ—Å –∫: {url}")

    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Funding –∞–∫—Ç–∏–≤–æ–≤: {e}")
        return None

    try:
        return response.json()
    except ValueError:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {response.text}")
        return None


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == '__main__':
    from system.system import api_key, api_secret

    print("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º Binance...")
    balances = get_wallet_balance(api_key, api_secret, quote_asset="USDT")

    if balances is None:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.")
    else:
        # –£–∂–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        pass

    print("\n" + "=" * 60)
    balances_funding = get_funding_assets(api_key, api_secret)
    if balances_funding:
        print("\n--- –ê–∫—Ç–∏–≤—ã –≤ Funding Wallet ---")
        for asset in balances_funding:
            free = asset.get('free', '0')
            locked = asset.get('locked', '0')
            asset_name = asset.get('asset', 'N/A')
            print(f"‚ñ∏ {asset_name}: —Å–≤–æ–±–æ–¥–Ω–æ {free}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {locked}")
    else:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ Funding Wallet.")
